import java.util.*;

public class SortingAlgorithms {
    static Scanner sc = new Scanner(System.in);

    // ---------- Bubble Sort ----------
    static void bubbleSort(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n-1; i++) {
            for (int j = 0; j < n-1-i; j++) {
                if (arr[j] > arr[j+1]) {
                    int temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                }
            }
            System.out.print("Pass " + (i+1) + ": ");
            printArray(arr);
        }
    }

    // ---------- Selection Sort ----------
    static void selectionSort(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n-1; i++) {
            int minIndex = i;
            for (int j = i+1; j < n; j++) {
                if (arr[j] < arr[minIndex]) {
                    minIndex = j;
                }
            }
            int temp = arr[i];
            arr[i] = arr[minIndex];
            arr[minIndex] = temp;

            System.out.print("Step " + (i+1) + ": ");
            printArray(arr);
        }
    }

    // ---------- Insertion Sort ----------
    static void insertionSort(int[] arr) {
        int n = arr.length;
        for (int i = 1; i < n; i++) {
            int key = arr[i];
            int j = i-1;
            while (j >= 0 && arr[j] > key) {
                arr[j+1] = arr[j];
                j--;
            }
            arr[j+1] = key;

            System.out.print("Step " + i + ": ");
            printArray(arr);
        }
    }

    // ---------- QuickSort ----------
    static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int p = partition(arr, low, high);
            quickSort(arr, low, p-1);
            quickSort(arr, p+1, high);
        }
    }

    static int partition(int[] arr, int low, int high) {
        int pivot = arr[high]; // last element as pivot
        int i = (low-1);
        for (int j = low; j < high; j++) {
            if (arr[j] < pivot) {
                i++;
                int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp;
            }
        }
        int temp = arr[i+1]; arr[i+1] = arr[high]; arr[high] = temp;
        return i+1;
    }

    // ---------- Utility ----------
    static void printArray(int[] arr) {
        for (int x : arr) System.out.print(x + " ");
        System.out.println();
    }

    // ---------- Main ----------
    public static void main(String[] args) {
        int[] arr = {64, 25, 12, 22, 11};
        int choice;

        do {
            System.out.println("\n===== Sorting Menu =====");
            System.out.println("1. Bubble Sort");
            System.out.println("2. Selection Sort");
            System.out.println("3. Insertion Sort");
            System.out.println("4. QuickSort");
            System.out.println("0. Exit");
            System.out.print("Enter choice: ");
            choice = sc.nextInt();

            int[] copy = Arrays.copyOf(arr, arr.length); // copy original
            switch(choice) {
                case 1:
                    System.out.println("Original: " + Arrays.toString(copy));
                    bubbleSort(copy);
                    break;
                case 2:
                    System.out.println("Original: " + Arrays.toString(copy));
                    selectionSort(copy);
                    break;
                case 3:
                    System.out.println("Original: " + Arrays.toString(copy));
                    insertionSort(copy);
                    break;
                case 4:
                    System.out.println("Original: " + Arrays.toString(copy));
                    quickSort(copy, 0, copy.length-1);
                    System.out.print("Sorted: ");
                    printArray(copy);
                    break;
                case 0: 
                    System.out.println("Exiting..."); 
                    break;
                default:
                    System.out.println("Invalid choice!");
            }
        } while (choice != 0);
    }
}
